GlowScript 3.2 VPython
from vpython import *

scene = canvas(background = color.white)

fix_point = sphere( pos = vec(0,6,0), radius = 0.5, color = color.red)

l_0 = 6
alpha = 90 * (pi / 180)  #degrees to radians
l_0_spring = 1.5 * l_0   #unstretched spring
k_spring = 10            #spring constant
g = 10                   #gravity
mu = 0.01                #dampening coefficient

ball = sphere(pos = fix_point.pos + vec(l_0*sin(alpha), -l_0*cos(alpha), 0), mass = 0.5, 
v = vec(0,0,0), radius = 0.1, color = color.orange, make_trail = True, trail_radius = 0.01)
        
spring = helix(pos=fix_point.pos, axis = ball.pos - fix_point.pos,
radius = 0.2, color = color.blue)

ball.p = ball.mass * ball.v

#create velocity graph where title is velocity, title is time(s), ytitle is v(t)
v_gr = graph( title = 'Velocity', xtitle = 'time (s)', ytitle = 'v(t)' )
#define two curves where one is x comp and one is y comp
vx_plot = gcurve( graph = v_gr, color = color.green )
vy_plot = gcurve( graph = v_gr, color = color.blue )

#create work graph where title is work, x title is time(s), ytitle is w(t)
work_gr = graph(title = 'Work', xtitle = 'time(s)', ytitle = 'w(t)')
#4 curves:
w_g = gdots(graph = work_gr, color = color.blue, size = 2)
e_g = gcurve(graph = work_gr, color = color.green)
w_s = gdots(graph = work_gr, color = color.magenta, size = 2)
e_s = gcurve(graph = work_gr, color = color.orange)

l = ball.pos - fix_point.pos #difference between ball's position and fix point pos
spring.s =  mag(l) - l_0_spring #difference between mag of l and unstretched spring
spring_e_0 = (1/2) * k_spring * (spring.s)**2 #1/2 kx^2 #equation related to spring constant and line 35
work_s = 0

grav_e_0 = ball.mass * g * ball.pos.y #mass times gravity times h (y-position of the ball)
work_g = 0

#energy graph, title = energy, xtitle = time(s), ytitle = E(t)
energy_gr = graph(title = 'Energy', xtitle = 'time(s)', ytitle = 'e(t)')
#4 curves:
kin_e_g = gcurve(graph = energy_gr, color = color.green)
grav_e_g = gcurve(graph = energy_gr, color = color.blue)
spring_e_g = gcurve(graph = energy_gr, color = color.magenta)
total_e_g = gcurve(graph = energy_gr, color = color.orange)

myrate = 2000 #og = 1600

t = 0
dt = 0.005 #og = 0.00005

while t < 10:
    rate(myrate)
    
    spring.pos = fix_point.pos
    
    spring.axis = ball.pos - fix_point.pos
    
    l = ball.pos - fix_point.pos
    
    spring.s = mag(l) - l_0_spring  # diff between mag of l and unstretched spring
    
    F_s = -k_spring * spring.s * l.hat # - spring constant times spring.s times direction of l
    
    F_g = ball.mass * vec(0, -g, 0) # mass times gravity expressed as a vector
    
    F_d = -mu * mag(ball.v) * ball.v.hat # linear drag force # - mu * mag of ball velocity * direction of ball's velocity
    
    F = F_s + F_g + F_d # net force, sum of all forces
    
    ball.p = ball.p + F * dt 
    ball.v = ball.p / ball.mass
    ball.pos = ball.pos + ball.v * dt
    
    work_g = work_g + dot(F_g, ball.v) * dt #old work + dotproduct between gravitational force and ball's velocitty * dt
    work_s = work_s + dot(F_s, ball.v) * dt #old work + dotproduct between spring force and ball's velocitty * dt
    
    spring.axis = ball.pos - fix_point.pos #difference between ball's position and fix point pos
    
    #x-component velocity .plot (t, x-comp (v)
    vx_plot.plot( pos = (t, ball.v.x) )
    #y-component velocity .plot (t, y-comp (v)
    vy_plot.plot( pos = (t, ball.v.y) )
    
    grav_e = ball.mass * g * ball.pos.y #mass times gravity times h (y-position of the ball)
    spring_e = (1/2) * k_spring * (spring.s)**2  #1/2 kx^2 #equation related to spring constant and line 35
    kin_e =  (1/2) * ball.mass * mag2(ball.v) #1/2 m*v^2 where you want the mag squared of velocity
    total = grav_e + spring_e + kin_e #sum of all 3 energies
    
    w_g.plot(pos = (t, -work_g) )
    e_g.plot(pos = (t, grav_e - grav_e_0) ) #diff between final and initial grav energy
    
    w_s.plot(pos = (t, -work_s) )
    e_s.plot(pos = (t, spring_e - spring_e_0) )
    
    grav_e_g.plot( pos = (t, grav_e) )#gravitational energy
    spring_e_g.plot( pos = (t, spring_e) )#spring energy
    kin_e_g.plot( pos = (t, kin_e) )
    total_e_g.plot( pos = (t, total) )
    
    t = t + dt
    
